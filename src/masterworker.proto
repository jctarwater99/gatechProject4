syntax = "proto3";

package masterworker;


// Enums
enum WorkStatus
{
    WORK_ACCEPTED = 0;
    WORK_PENDING = 1;
    WORK_FINISHED = 2;
    WORK_FAILED = 3;
}

enum CommandType
{
    CMD_TYPE_MAP = 0;
    CMD_TYPE_REDUCE = 1;
    CMD_TYPE_STATUS = 2;
}

enum CommandStatus
{
    CMD_STATUS_FAIL = 0;
    CMD_STATUS_SUCCESS = 1;
    CMD_STATUS_IN_PROGRESS = 2;
    CMD_STATUS_INVALID = 3;
}


enum WorkerState {
	STATE_IDLE = 0;
	STATE_WORKING = 1;
	STATE_FAILED = 2;
};


enum WorkerRole {
	ROLE_NONE = 0;
	ROLE_MAPPER = 1; 
	ROLE_REDUCER = 2;
};


//-- Sharding related structures --
message FileSegmentInfo
{
    string file_name = 1;
    uint32 start_line = 2;
    uint32 end_line = 3;
}

message FileShardInfo
{
    repeated FileSegmentInfo segments = 1;    
}


//-- Mapping related structures --
message MapResult
{
    string file_name = 1;
}

message MapOutputInfo
{
    string mapper_id = 1;
    repeated MapResult map_result = 2;    
}


//-- Reducing related structures --
message ReduceResult
{
    string reducer_id = 1;
    string reduce_output_file = 2;
}


//-- Master / Worker interaction structures

message WorkerCommand
{
    CommandType cmd_type = 1;
    oneof cmd_body
    {
        MapCommand map_cmd = 2;
        ReduceCommand reduce_cmd = 3;
        StatusCommand status_cmd = 4;
    }        
}

message MapCommand
{
    FileShardInfo shard_info = 1;
}

message ReduceCommand
{
    // Map-output will become input to Reduce stage
    MapOutputInfo map_output_info = 1;
}

message StatusCommand
{
    // keep placeholder for now
    uint32 dummy = 1;
}


message WorkerReply
{
    CommandType cmd_type = 1;
    CommandStatus cmd_status = 2;
    oneof reply_body
    {
        MapReply map_reply = 3;
        ReduceReply reduce_reply = 4;
        StatusReply status_reply = 5;
    }
}

message MapReply
{
    MapOutputInfo map_output_info = 1;
}

message ReduceReply
{
    ReduceResult reduce_result = 1;
}

message StatusReply
{
    WorkStatus status = 1;
    WorkerCommand cmd = 2;
}



//-- Services --
service WorkerService {
    rpc assignTask(WorkerCommand) returns (WorkerReply) {}
}

/*
message WorkerTask {
    bool task_is_map = 1
    
    FileShard shard = 2
    ReduceStruct {maper_count,
                  int reducer_number
                  string intermediate_file_locations
                  string output_foler_location
                 } = 3
}
*/


